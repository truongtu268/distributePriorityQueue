// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAd = `-- name: CreateAd :exec
insert into ad (id, title, description, status, genre, target_audiences, visual_elements,call_to_action,
                duration, priority, created_at)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreateAdParams struct {
	ID              string
	Title           pgtype.Text
	Description     pgtype.Text
	Status          pgtype.Text
	Genre           pgtype.Text
	TargetAudiences []string
	VisualElements  []string
	CallToAction    pgtype.Text
	Duration        pgtype.Int4
	Priority        pgtype.Int4
	CreatedAt       pgtype.Timestamptz
}

func (q *Queries) CreateAd(ctx context.Context, arg CreateAdParams) error {
	_, err := q.db.Exec(ctx, createAd,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Genre,
		arg.TargetAudiences,
		arg.VisualElements,
		arg.CallToAction,
		arg.Duration,
		arg.Priority,
		arg.CreatedAt,
	)
	return err
}

const getAdByID = `-- name: GetAdByID :one
select id, title, description, status, genre, target_audiences, visual_elements, analysis, call_to_action, duration, priority, created_at, retried_at, completed_at, retry_time
from ad
where id = $1
`

func (q *Queries) GetAdByID(ctx context.Context, id string) (Ad, error) {
	row := q.db.QueryRow(ctx, getAdByID, id)
	var i Ad
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Genre,
		&i.TargetAudiences,
		&i.VisualElements,
		&i.Analysis,
		&i.CallToAction,
		&i.Duration,
		&i.Priority,
		&i.CreatedAt,
		&i.RetriedAt,
		&i.CompletedAt,
		&i.RetryTime,
	)
	return i, err
}

const updateAdAnalysis = `-- name: UpdateAdAnalysis :exec
update ad
set status = $1, analysis = $2, completed_at = $3
where id = $4
`

type UpdateAdAnalysisParams struct {
	Status      pgtype.Text
	Analysis    []byte
	CompletedAt pgtype.Timestamptz
	ID          string
}

func (q *Queries) UpdateAdAnalysis(ctx context.Context, arg UpdateAdAnalysisParams) error {
	_, err := q.db.Exec(ctx, updateAdAnalysis,
		arg.Status,
		arg.Analysis,
		arg.CompletedAt,
		arg.ID,
	)
	return err
}

const updateAdRetry = `-- name: UpdateAdRetry :exec
update ad
set retried_at = $1, retry_time = $2
where id = $3
`

type UpdateAdRetryParams struct {
	RetriedAt pgtype.Timestamptz
	RetryTime pgtype.Int4
	ID        string
}

func (q *Queries) UpdateAdRetry(ctx context.Context, arg UpdateAdRetryParams) error {
	_, err := q.db.Exec(ctx, updateAdRetry, arg.RetriedAt, arg.RetryTime, arg.ID)
	return err
}

const updateAdStatus = `-- name: UpdateAdStatus :exec
update ad
set status = $1
where id = $2
`

type UpdateAdStatusParams struct {
	Status pgtype.Text
	ID     string
}

func (q *Queries) UpdateAdStatus(ctx context.Context, arg UpdateAdStatusParams) error {
	_, err := q.db.Exec(ctx, updateAdStatus, arg.Status, arg.ID)
	return err
}
