// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "github.com/truongtu268/distributePriorityQueue/model"
)

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// Dequeue provides a mock function with given fields:
func (_m *Queue) Dequeue() (model.PriorityQueueTask, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dequeue")
	}

	var r0 model.PriorityQueueTask
	var r1 bool
	if rf, ok := ret.Get(0).(func() (model.PriorityQueueTask, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.PriorityQueueTask); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.PriorityQueueTask)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Enqueue provides a mock function with given fields: _a0
func (_m *Queue) Enqueue(_a0 model.PriorityQueueTask) {
	_m.Called(_a0)
}

// IsClearQueue provides a mock function with given fields:
func (_m *Queue) IsClearQueue() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsClearQueue")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Peek provides a mock function with given fields:
func (_m *Queue) Peek() (model.PriorityQueueTask, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Peek")
	}

	var r0 model.PriorityQueueTask
	var r1 bool
	if rf, ok := ret.Get(0).(func() (model.PriorityQueueTask, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.PriorityQueueTask); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.PriorityQueueTask)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
